(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{532:function(t,e,n){"use strict";n.r(e);var r=n(42),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"simpletcpconnectionprovider-hpp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-hpp"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider.hpp"),n("seo")],1),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/network/client/SimpleTCPConnectionProvider.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/network/client/SimpleTCPConnectionProvider.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("code",[t._v("API: latest")]),n("br"),t._v(" "),n("code",[t._v("module: oatpp")]),n("br"),t._v(" "),n("code",[t._v('#include "oatpp/network/client/SimpleTCPConnectionProvider.hpp"')])]),t._v(" "),n("h2",{attrs:{id:"simpletcpconnectionprovider"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider")]),t._v(" "),n("p",[t._v("Simple provider of clinet TCP connections.")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" network "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" client "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleTCPConnectionProvider")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" base"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Countable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" ClientConnectionProvider "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Return Type")]),t._v(" "),n("th",[t._v("Name")]),t._v(" "),n("th",[t._v("Summary")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("[none]")])]),t._v(" "),n("td",[n("a",{attrs:{href:"#simpletcpconnectionprovider-simpletcpconnectionprovider"}},[t._v("SimpleTCPConnectionProvider")])]),t._v(" "),n("td",[t._v("Constructor.")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("std::shared_ptr<SimpleTCPConnectionProvider>")])]),t._v(" "),n("td",[n("a",{attrs:{href:"#simpletcpconnectionprovider-createshared"}},[t._v("createShared")])]),t._v(" "),n("td",[t._v("Create shared client SimpleTCPConnectionProvider.")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("void")])]),t._v(" "),n("td",[n("a",{attrs:{href:"#simpletcpconnectionprovider-close"}},[t._v("close")])]),t._v(" "),n("td",[t._v("Implements "),n("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#connectionprovider-close"}},[t._v("oatpp::network::ConnectionProvider::close()")]),t._v(". Here does nothing.")],1)]),t._v(" "),n("tr",[n("td",[n("code",[t._v("std::shared_ptr<IOStream>")])]),t._v(" "),n("td",[n("a",{attrs:{href:"#simpletcpconnectionprovider-getconnection"}},[t._v("getConnection")])]),t._v(" "),n("td",[t._v("Get connection.")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("oatpp::async::CoroutineStarterForResult<const std::shared_ptr<oatpp::data::stream::IOStream>&>")])]),t._v(" "),n("td",[n("a",{attrs:{href:"#simpletcpconnectionprovider-getconnectionasync"}},[t._v("getConnectionAsync")])]),t._v(" "),n("td",[t._v("Get connection in asynchronous manner.")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("void")])]),t._v(" "),n("td",[n("a",{attrs:{href:"#simpletcpconnectionprovider-invalidateconnection"}},[t._v("invalidateConnection")])]),t._v(" "),n("td",[t._v("Call shutdown read and write on an underlying file descriptor.")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("oatpp::String")])]),t._v(" "),n("td",[n("a",{attrs:{href:"#simpletcpconnectionprovider-gethost"}},[t._v("getHost")])]),t._v(" "),n("td",[t._v("Get host name.")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("v_uint16")])]),t._v(" "),n("td",[n("a",{attrs:{href:"#simpletcpconnectionprovider-getport"}},[t._v("getPort")])]),t._v(" "),n("td",[t._v("Get port.")])])])]),t._v(" "),n("h3",{attrs:{id:"simpletcpconnectionprovider-simpletcpconnectionprovider"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-simpletcpconnectionprovider"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider::SimpleTCPConnectionProvider")]),t._v(" "),n("p",[t._v("Constructor. "),n("ul",[n("li",[n("strong",[t._v("@param")]),t._v(' host - host name without schema and port. Ex.: "oatpp.io", "127.0.0.1", "localhost". ')]),n("li",[n("strong",[t._v("@param")]),t._v(" port - server port. ")])])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleTCPConnectionProvider")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oatpp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" host"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_uint16 port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"simpletcpconnectionprovider-createshared"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-createshared"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider::createShared")]),t._v(" "),n("p",[t._v("Create shared client SimpleTCPConnectionProvider. "),n("ul",[n("li",[n("strong",[t._v("@param")]),t._v(' host - host name without schema and port. Ex.: "oatpp.io", "127.0.0.1", "localhost". ')]),n("li",[n("strong",[t._v("@param")]),t._v(" port - server port. ")]),n("li",[n("strong",[t._v("@return")]),t._v(" - "),n("code",[t._v("std::shared_ptr")]),t._v(" to SimpleTCPConnectionProvider. ")])])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("SimpleTCPConnectionProvider"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oatpp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("String"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" host"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_uint16 port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"simpletcpconnectionprovider-close"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-close"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider::close")]),t._v(" "),n("p",[t._v("Implements "),n("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#connectionprovider-close"}},[t._v("oatpp::network::ConnectionProvider::close()")]),t._v(". Here does nothing.")],1),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),n("h3",{attrs:{id:"simpletcpconnectionprovider-getconnection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-getconnection"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider::getConnection")]),t._v(" "),n("p",[t._v("Get connection. "),n("ul",[n("li",[n("strong",[t._v("@return")]),t._v(" - "),n("code",[t._v("std::shared_ptr")]),t._v(" to "),n("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/stream/Stream/#iostream"}},[t._v("oatpp::data::stream::IOStream")]),t._v(". ")],1)])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),n("h3",{attrs:{id:"simpletcpconnectionprovider-getconnectionasync"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-getconnectionasync"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider::getConnectionAsync")]),t._v(" "),n("p",[t._v("Get connection in asynchronous manner. "),n("ul",[n("li",[n("strong",[t._v("@return")]),t._v(" - oatpp::async::CoroutineStarterForResult. ")])])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("oatpp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("async"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("CoroutineStarterForResult"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("oatpp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IOStream"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnectionAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),n("h3",{attrs:{id:"simpletcpconnectionprovider-invalidateconnection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-invalidateconnection"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider::invalidateConnection")]),t._v(" "),n("p",[t._v("Call shutdown read and write on an underlying file descriptor. "),n("code",[t._v("connection")]),t._v(" "),n("strong",[t._v("MUST")]),t._v(" be an object previously obtained from "),n("strong",[t._v("THIS")]),t._v(" connection provider. "),n("ul",[n("li",[n("strong",[t._v("@param")]),t._v(" connection ")])])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("invalidateConnection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" connection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),n("h3",{attrs:{id:"simpletcpconnectionprovider-gethost"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-gethost"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider::getHost")]),t._v(" "),n("p",[t._v("Get host name. "),n("ul",[n("li",[n("strong",[t._v("@return")]),t._v(" - host name. ")])])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("oatpp"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("String "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHost")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"simpletcpconnectionprovider-getport"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simpletcpconnectionprovider-getport"}},[t._v("#")]),t._v(" SimpleTCPConnectionProvider::getPort")]),t._v(" "),n("p",[t._v("Get port. "),n("ul",[n("li",[n("strong",[t._v("@return")]),t._v(" - port. ")])])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("v_uint16 "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);