(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{514:function(t,a,s){"use strict";s.r(a);var r=s(42),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"strbuffer-hpp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-hpp"}},[t._v("#")]),t._v(" StrBuffer.hpp"),s("seo")],1),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/core/base/StrBuffer.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/core/base/StrBuffer.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("code",[t._v("API: latest")]),s("br"),t._v(" "),s("code",[t._v("module: oatpp")]),s("br"),t._v(" "),s("code",[t._v('#include "oatpp/core/base/StrBuffer.hpp"')])]),t._v(" "),s("h2",{attrs:{id:"strbuffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer"}},[t._v("#")]),t._v(" StrBuffer")]),t._v(" "),s("p",[t._v("String buffer class.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" base "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StrBuffer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("base"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Countable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Return Type")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Summary")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("[none]")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-strbuffer"}},[t._v("StrBuffer")])]),t._v(" "),s("td",[t._v("Multiple implementations: "),s("br"),s("ol",[s("li",[t._v("Constructor. Default. ")]),s("li",[t._v("Constructor. ")])])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("[none]")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-~strbuffer"}},[t._v("~StrBuffer")])]),t._v(" "),s("td",[t._v("virtual Destructor.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("std::shared_ptr<StrBuffer>")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-createshared"}},[t._v("createShared")])]),t._v(" "),s("td",[t._v("Multiple implementations: "),s("br"),s("ol",[s("li",[t._v("Create shared StrBuffer of specified size. ")]),s("li",[t._v("Create shared StrBuffer with data, size, and copyAsOwnData parameters. ")]),s("li",[t._v("Create shared StrBuffer with data, and copyAsOwnData parameters. ")]),s("li",[t._v("Create shared StrBuffer from other StrBuffer. ")])])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("std::shared_ptr<StrBuffer>")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-createsharedconcatenated"}},[t._v("createSharedConcatenated")])]),t._v(" "),s("td",[t._v("Create shared StrBuffer of size=size1 + size2 and data=data1 + data2.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("std::shared_ptr<StrBuffer>")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-createfromcstring"}},[t._v("createFromCString")])]),t._v(" "),s("td",[t._v("Create shared StrBuffer from c-string.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("std::shared_ptr<StrBuffer>")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-loadfromfile"}},[t._v("loadFromFile")])]),t._v(" "),s("td",[t._v("Load data from file and store in StrBuffer.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-savetofile"}},[t._v("saveToFile")])]),t._v(" "),s("td",[t._v("Save content of the buffer to file.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("p_char8")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-getdata"}},[t._v("getData")])]),t._v(" "),s("td",[t._v("Get pointer to data of the buffer.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("v_buff_size")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-getsize"}},[t._v("getSize")])]),t._v(" "),s("td",[t._v("Get buffer size.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("const char*")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-c-str"}},[t._v("c_str")])]),t._v(" "),s("td",[t._v("Get pointer to data of the buffer as "),s("code",[t._v("const* char")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("std::string")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-std-str"}},[t._v("std_str")])]),t._v(" "),s("td",[t._v("Get copy of the buffer data as "),s("code",[t._v("std::string")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("bool")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-hasowndata"}},[t._v("hasOwnData")])]),t._v(" "),s("td",[t._v("Is this object is responsible for freeing buffer data.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("std::shared_ptr<StrBuffer>")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-tolowercase"}},[t._v("toLowerCase")])]),t._v(" "),s("td",[t._v("Create lowercase copy of the buffer."),s("br")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("std::shared_ptr<StrBuffer>")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-touppercase"}},[t._v("toUpperCase")])]),t._v(" "),s("td",[t._v("Create uppercase copy of the buffer."),s("br")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("bool")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-equals"}},[t._v("equals")])]),t._v(" "),s("td",[t._v("Multiple implementations: "),s("br"),s("ol",[s("li",[t._v("Check string equality of the buffer to data of specified size. ")]),s("li",[t._v("Check string equality of the buffer to data of specified size. ")]),s("li",[t._v("Check string equality to other buffer. ")]),s("li",[t._v("Check string equality of data1 to data2. ")]),s("li",[t._v("Check string equality of data1 to data2. ")]),s("li",[t._v("Check string equality of str1 to str2. ")])])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("bool")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-startswith"}},[t._v("startsWith")])]),t._v(" "),s("td",[t._v("Multiple implementations: "),s("br"),s("ol",[s("li",[t._v("Check if buffer starts with specified data, size. ")]),s("li",[t._v("Check if buffer starts with specified data. ")]),s("li",[t._v("Check if buffer starts with specified data. ")])])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("v_buff_size")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-compare"}},[t._v("compare")])]),t._v(" "),s("td",[t._v("Multiple implementations: "),s("br"),s("ol",[s("li",[t._v("Compare data1, data2 using "),s("code",[t._v("std::memcmp")]),t._v(". ")]),s("li",[t._v("Compare data1, data2 using "),s("code",[t._v("std::memcmp")]),t._v(". ")])])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("bool")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-equalsci"}},[t._v("equalsCI")])]),t._v(" "),s("td",[t._v("Multiple implementations: "),s("br"),s("ol",[s("li",[t._v("Check Case Insensitive string equality of data1 to data2. ")]),s("li",[t._v("Check Case Insensitive string equality of data1 to data2. ")]),s("li",[t._v("Check Case Insensitive string equality of str1 to str2. ")])])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("bool")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-equalsci-fast"}},[t._v("equalsCI_FAST")])]),t._v(" "),s("td",[t._v("Multiple implementations: "),s("br"),s("ol",[s("li",[t._v("Check Case Insensitive string equality of data1 to data2. (ASCII only, correct compare if one of strings contains letters only) ")]),s("li",[t._v("Check Case Insensitive string equality of data1 to data2. (ASCII only, correct compare if one of strings contains letters only) ")]),s("li",[t._v("Check Case Insensitive string equality of str1 to str2. (ASCII only, correct compare if one of strings contains letters only) ")]),s("li",[t._v("Check Case Insensitive string equality of str1 to str2. (ASCII only, correct compare if one of strings contains letters only) ")])])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-lowercase"}},[t._v("lowerCase")])]),t._v(" "),s("td",[t._v("Change characters in data to lowercase.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#strbuffer-uppercase"}},[t._v("upperCase")])]),t._v(" "),s("td",[t._v("Change characters in data to uppercase.")])])])]),t._v(" "),s("h3",{attrs:{id:"strbuffer-strbuffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-strbuffer"}},[t._v("#")]),t._v(" StrBuffer::StrBuffer")]),t._v(" "),s("ol",[s("li",[t._v("Constructor. Default."),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StrBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Constructor. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - pointer to data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" copyAsOwnData - if true then allocate own buffer and copy data to that buffer. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StrBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" copyAsOwnData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"strbuffer-strbuffer-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-strbuffer-2"}},[t._v("#")]),t._v(" StrBuffer::~StrBuffer")]),t._v(" "),s("p",[t._v("virtual Destructor.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StrBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-createshared"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-createshared"}},[t._v("#")]),t._v(" StrBuffer::createShared")]),t._v(" "),s("ol",[s("li",[t._v("Create shared StrBuffer of specified size. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the buffer. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - shared_ptr to StrBuffer. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Create shared StrBuffer with data, size, and copyAsOwnData parameters. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - buffer data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" copyAsOwnData - if true then allocate own buffer and copy data to that buffer. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - shared_ptr to StrBuffer. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" copyAsOwnData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Create shared StrBuffer with data, and copyAsOwnData parameters. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - buffer data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" copyAsOwnData - if true then allocate own buffer and copy data to that buffer. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - shared_ptr to StrBuffer. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" copyAsOwnData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Create shared StrBuffer from other StrBuffer. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" other - other StrBuffer. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" copyAsOwnData - if true then allocate own buffer and copy data to that buffer. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - shared_ptr to StrBuffer. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" other"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" copyAsOwnData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"strbuffer-createsharedconcatenated"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-createsharedconcatenated"}},[t._v("#")]),t._v(" StrBuffer::createSharedConcatenated")]),t._v(" "),s("p",[t._v("Create shared StrBuffer of size=size1 + size2 and data=data1 + data2. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size1 - size of the data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size2 - size of the data2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - shared_ptr to StrBuffer. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createSharedConcatenated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-createfromcstring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-createfromcstring"}},[t._v("#")]),t._v(" StrBuffer::createFromCString")]),t._v(" "),s("p",[t._v("Create shared StrBuffer from c-string. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" copyAsOwnData - if true then allocate own buffer and copy data to that buffer. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - shared_ptr to StrBuffer. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createFromCString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" copyAsOwnData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-loadfromfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-loadfromfile"}},[t._v("#")]),t._v(" StrBuffer::loadFromFile")]),t._v(" "),s("p",[t._v("Load data from file and store in StrBuffer. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" filename - name of the file. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - shared_ptr to StrBuffer. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadFromFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-savetofile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-savetofile"}},[t._v("#")]),t._v(" StrBuffer::saveToFile")]),t._v(" "),s("p",[t._v("Save content of the buffer to file. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" filename - name of the file. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("saveToFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-getdata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-getdata"}},[t._v("#")]),t._v(" StrBuffer::getData")]),t._v(" "),s("p",[t._v("Get pointer to data of the buffer. "),s("ul",[s("li",[s("strong",[t._v("@return")]),t._v(" - pointer to data of the buffer. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("p_char8 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-getsize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-getsize"}},[t._v("#")]),t._v(" StrBuffer::getSize")]),t._v(" "),s("p",[t._v("Get buffer size. "),s("ul",[s("li",[s("strong",[t._v("@return")]),t._v(" - buffer size. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("v_buff_size "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-c-str"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-c-str"}},[t._v("#")]),t._v(" StrBuffer::c_str")]),t._v(" "),s("p",[t._v("Get pointer to data of the buffer as "),s("code",[t._v("const* char")]),t._v(". "),s("ul",[s("li",[s("strong",[t._v("@return")]),t._v(" - pointer to data of the buffer. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c_str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-std-str"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-std-str"}},[t._v("#")]),t._v(" StrBuffer::std_str")]),t._v(" "),s("p",[t._v("Get copy of the buffer data as "),s("code",[t._v("std::string")]),t._v(". "),s("ul",[s("li",[s("strong",[t._v("@return")]),t._v(" - copy of the buffer data as "),s("code",[t._v("std::string")]),t._v(". ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("std_str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-hasowndata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-hasowndata"}},[t._v("#")]),t._v(" StrBuffer::hasOwnData")]),t._v(" "),s("p",[t._v("Is this object is responsible for freeing buffer data. "),s("ul",[s("li",[s("strong",[t._v("@return")]),t._v(" - true if this object is responsible for freeing buffer data. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-tolowercase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-tolowercase"}},[t._v("#")]),t._v(" StrBuffer::toLowerCase")]),t._v(" "),s("p",[t._v("Create lowercase copy of the buffer."),s("br"),t._v(" (correct for ASCII only) "),s("ul",[s("li",[s("strong",[t._v("@return")]),t._v(" - copy of the buffer containing lowercase variants of ascii symbols. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-touppercase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-touppercase"}},[t._v("#")]),t._v(" StrBuffer::toUpperCase")]),t._v(" "),s("p",[t._v("Create uppercase copy of the buffer."),s("br"),t._v(" (correct for ASCII only) "),s("ul",[s("li",[s("strong",[t._v("@return")]),t._v(" - copy of the buffer containing uppercase variants of ascii symbols. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-equals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-equals"}},[t._v("#")]),t._v(" StrBuffer::equals")]),t._v(" "),s("ol",[s("li",[t._v("Check string equality of the buffer to data of specified size. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - pointer to data to be compared with the buffer data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the data. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - true if all chars of buffer are same as in data, and size == this.getSize(). ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check string equality of the buffer to data of specified size. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - pointer to data to be compared with the buffer data. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - true if all chars of buffer are same as in data, and std::strlen(data) == this.getSize(). ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check string equality to other buffer. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" other - pointer to other StrBuffer to be compared with the buffer data. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - true if all chars of one buffer are same as in other, and other.getSize() == this.getSize(). ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" other"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check string equality of data1 to data2. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - number of characters to compare. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check string equality of data1 to data2. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check string equality of str1 to str2. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" str1 - pointer to str1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" str2 - pointer to str2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"strbuffer-startswith"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-startswith"}},[t._v("#")]),t._v(" StrBuffer::startsWith")]),t._v(" "),s("ol",[s("li",[t._v("Check if buffer starts with specified data, size. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - data as "),s("code",[t._v("const void*")]),t._v(". ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the data. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - true if buffer starts with specified data. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check if buffer starts with specified data. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - data as "),s("code",[t._v("const char*")]),t._v(". ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - true if buffer starts with specified data. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check if buffer starts with specified data. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - data as "),s("code",[t._v("StrBuffer")]),t._v(". ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - true if buffer starts with specified data. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"strbuffer-compare"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-compare"}},[t._v("#")]),t._v(" StrBuffer::compare")]),t._v(" "),s("ol",[s("li",[t._v("Compare data1, data2 using "),s("code",[t._v("std::memcmp")]),t._v(". "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - number of characters to compare. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - Negative value if the first differing byte (reinterpreted as unsigned char) in data1 is less than the corresponding byte in data2."),s("br"),t._v(" ​0​ if all count bytes of data1 and data2 are equal."),s("br"),t._v(" Positive value if the first differing byte in data1 is greater than the corresponding byte in data2. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" v_buff_size "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Compare data1, data2 using "),s("code",[t._v("std::memcmp")]),t._v(". "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - data1 as "),s("code",[t._v("StrBuffer")]),t._v(". ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - data2 as "),s("code",[t._v("StrBuffer")]),t._v(". ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - Negative value if the first differing byte (reinterpreted as unsigned char) in data1 is less than the corresponding byte in data2."),s("br"),t._v(" ​0​ if all count bytes of data1 and data2 are equal."),s("br"),t._v(" Positive value if the first differing byte in data1 is greater than the corresponding byte in data2. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" v_buff_size "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"strbuffer-equalsci"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-equalsci"}},[t._v("#")]),t._v(" StrBuffer::equalsCI")]),t._v(" "),s("ol",[s("li",[t._v("Check Case Insensitive string equality of data1 to data2. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - number of characters to compare. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsCI")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check Case Insensitive string equality of data1 to data2. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsCI")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check Case Insensitive string equality of str1 to str2. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" str1 - pointer to str1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" str2 - pointer to str2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsCI")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"strbuffer-equalsci-fast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-equalsci-fast"}},[t._v("#")]),t._v(" StrBuffer::equalsCI_FAST")]),t._v(" "),s("ol",[s("li",[t._v("Check Case Insensitive string equality of data1 to data2. (ASCII only, correct compare if one of strings contains letters only) "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - number of characters to compare. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsCI_FAST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check Case Insensitive string equality of data1 to data2. (ASCII only, correct compare if one of strings contains letters only) "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsCI_FAST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check Case Insensitive string equality of str1 to str2. (ASCII only, correct compare if one of strings contains letters only) "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" str1 - pointer to str1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" str2 - pointer to str2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsCI_FAST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("Check Case Insensitive string equality of str1 to str2. (ASCII only, correct compare if one of strings contains letters only) "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" str1 - pointer to str1 as "),s("code",[t._v("StrBuffer")]),t._v(". ")]),s("li",[s("strong",[t._v("@param")]),t._v(" str2 - pointer to str2 as "),s("code",[t._v("const char*")])]),s("li",[s("strong",[t._v("@return")]),t._v(" - "),s("code",[t._v("true")]),t._v(" if equals. ")])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsCI_FAST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StrBuffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"strbuffer-lowercase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-lowercase"}},[t._v("#")]),t._v(" StrBuffer::lowerCase")]),t._v(" "),s("p",[t._v("Change characters in data to lowercase. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - pointer to data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the data. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"strbuffer-uppercase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strbuffer-uppercase"}},[t._v("#")]),t._v(" StrBuffer::upperCase")]),t._v(" "),s("p",[t._v("Change characters in data to uppercase. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - pointer to data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the data. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("upperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);