(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{530:function(t,n,o){"use strict";o.r(n);var e=o(42),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,o=t._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"connectionpool-hpp"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-hpp"}},[t._v("#")]),t._v(" ConnectionPool.hpp"),o("seo")],1),t._v(" "),o("p",[o("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/network/ConnectionPool.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),o("OutboundLink")],1),o("br"),t._v(" "),o("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/network/ConnectionPool.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),o("OutboundLink")],1)]),t._v(" "),o("p",[o("code",[t._v("API: latest")]),o("br"),t._v(" "),o("code",[t._v("module: oatpp")]),o("br"),t._v(" "),o("code",[t._v('#include "oatpp/network/ConnectionPool.hpp"')])]),t._v(" "),o("h2",{attrs:{id:"connectionpool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool"}},[t._v("#")]),t._v(" ConnectionPool")]),t._v(" "),o("p",[t._v("Connection Pool.")]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" network "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConnectionPool")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),o("h3",{attrs:{id:"methods"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),o("table",[o("thead",[o("tr",[o("th",[t._v("Return Type")]),t._v(" "),o("th",[t._v("Name")]),t._v(" "),o("th",[t._v("Summary")])])]),t._v(" "),o("tbody",[o("tr",[o("td",[o("code",[t._v("[none]")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-connectionpool"}},[t._v("ConnectionPool")])]),t._v(" "),o("td",[t._v("Constructor.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("[none]")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-~connectionpool"}},[t._v("~ConnectionPool")])]),t._v(" "),o("td",[t._v("Destructor.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("std::shared_ptr<ConnectionProvider>")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-getconnectionprovider"}},[t._v("getConnectionProvider")])]),t._v(" "),o("td",[t._v("Get underlying connection provider.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("std::shared_ptr<Pool>")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-getpoolinstance"}},[t._v("getPoolInstance")])]),t._v(" "),o("td",[t._v("Get pool instance.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("std::shared_ptr<ConnectionWrapper>")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-getconnection"}},[t._v("getConnection")])]),t._v(" "),o("td",[t._v("Get connection.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("oatpp::async::CoroutineStarterForResult<const std::shared_ptr<ConnectionWrapper>&>")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-getconnectionasync"}},[t._v("getConnectionAsync")])]),t._v(" "),o("td",[t._v("Multiple implementations: "),o("br"),o("ol",[o("li",[t._v("Get connection in Async manner. ")]),o("li",[t._v("Get connection in Async manner. ")])])])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("void")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-close"}},[t._v("close")])]),t._v(" "),o("td",[t._v("Close all connections.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("void")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-invalidateconnection"}},[t._v("invalidateConnection")])]),t._v(" "),o("td",[t._v("Invalidate connection that was previously obtain by a call to "),o("code",[t._v("getConnection()")]),t._v(" or "),o("code",[t._v("getConnectionAsync()")]),t._v(".")])])])]),t._v(" "),o("h3",{attrs:{id:"connectionpool-connectionpool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-connectionpool"}},[t._v("#")]),t._v(" ConnectionPool::ConnectionPool")]),t._v(" "),o("p",[t._v("Constructor. "),o("ul",[o("li",[o("strong",[t._v("@param")]),t._v(" connectionProvider - underlying connection provider. ")]),o("li",[o("strong",[t._v("@param")]),t._v(" maxConnections - maximum number of allowed connections in the pool. ")]),o("li",[o("strong",[t._v("@param")]),t._v(" maxConnectionTTL - maximum time that unused connection is allowed to live in the pool. ")])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectionPool")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionProvider"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" connectionProvider"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               v_int64 maxConnections"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("chrono"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("duration"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("v_int64"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("micro"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" maxConnectionTTL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"connectionpool-connectionpool-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-connectionpool-2"}},[t._v("#")]),t._v(" ConnectionPool::~ConnectionPool")]),t._v(" "),o("p",[t._v("Destructor. Calls "),o("a",{attrs:{href:"#connectionpool-close"}},[t._v("ConnectionPool::close()")]),t._v(".")]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectionPool")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"connectionpool-getconnectionprovider"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-getconnectionprovider"}},[t._v("#")]),t._v(" ConnectionPool::getConnectionProvider")]),t._v(" "),o("p",[t._v("Get underlying connection provider. "),o("ul",[o("li",[o("strong",[t._v("@return")]),t._v(" - "),o("code",[t._v("std::shared_ptr")]),t._v(" to "),o("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#connectionprovider"}},[t._v("oatpp::network::ConnectionProvider")]),t._v(". ")],1)])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[t._v("std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionProvider"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnectionProvider")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"connectionpool-getpoolinstance"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-getpoolinstance"}},[t._v("#")]),t._v(" ConnectionPool::getPoolInstance")]),t._v(" "),o("p",[t._v("Get pool instance. "),o("ul",[o("li",[o("strong",[t._v("@return")])])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[t._v("std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Pool"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPoolInstance")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"connectionpool-getconnection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-getconnection"}},[t._v("#")]),t._v(" ConnectionPool::getConnection")]),t._v(" "),o("p",[t._v("Get connection. This call will wait until connection is available. "),o("ul",[o("li",[o("strong",[t._v("@return")])])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[t._v("std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionWrapper"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"connectionpool-getconnectionasync"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-getconnectionasync"}},[t._v("#")]),t._v(" ConnectionPool::getConnectionAsync")]),t._v(" "),o("ol",[o("li",[t._v("Get connection in Async manner. "),o("ul",[o("li",[o("strong",[t._v("@param")]),t._v(" connectionProvider ")]),o("li",[o("strong",[t._v("@param")]),t._v(" poolInstance ")]),o("li",[o("strong",[t._v("@return")])])]),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" oatpp"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("async"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("CoroutineStarterForResult"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionWrapper"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnectionAsync")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionProvider"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" connectionProvider"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Pool"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" poolInstance"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),o("li",[t._v("Get connection in Async manner. This call will wait until connection is available. "),o("ul",[o("li",[o("strong",[t._v("@return")])])]),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[t._v("oatpp"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("async"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("CoroutineStarterForResult"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionWrapper"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnectionAsync")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),o("h3",{attrs:{id:"connectionpool-close"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-close"}},[t._v("#")]),t._v(" ConnectionPool::close")]),t._v(" "),o("p",[t._v("Close all connections. All free connections that are currently in the pool are closed immediately. Other connections are closed once returned to the pool.")]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"connectionpool-invalidateconnection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-invalidateconnection"}},[t._v("#")]),t._v(" ConnectionPool::invalidateConnection")]),t._v(" "),o("p",[t._v("Invalidate connection that was previously obtain by a call to "),o("code",[t._v("getConnection()")]),t._v(" or "),o("code",[t._v("getConnectionAsync()")]),t._v(". "),o("ul",[o("li",[o("strong",[t._v("@param")]),t._v(" connection - "),o("strong",[t._v("MUST")]),t._v(" be instance of "),o("code",[t._v("[ConnectionPool::ConnectionWrapper](#connectionpool-connectionwrapper)")]),t._v(" or its subclass. ")])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("invalidateConnection")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" connection"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h2",{attrs:{id:"connectionpool-connectionwrapper"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-connectionwrapper"}},[t._v("#")]),t._v(" ConnectionPool::ConnectionWrapper")]),t._v(" "),o("p",[t._v("Wrapper over "),o("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/stream/Stream/#iostream"}},[t._v("oatpp::data::stream::IOStream")]),t._v(". Will acquire connection from the pool on initialization and will return connection to the pool on destruction.")],1),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" network "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConnectionPool")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConnectionWrapper")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" oatpp"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("data"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IOStream "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),o("h3",{attrs:{id:"methods-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#methods-2"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),o("table",[o("thead",[o("tr",[o("th",[t._v("Return Type")]),t._v(" "),o("th",[t._v("Name")]),t._v(" "),o("th",[t._v("Summary")])])]),t._v(" "),o("tbody",[o("tr",[o("td",[o("code",[t._v("bool")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-connectionwrapper-isvalid"}},[t._v("isValid")])]),t._v(" "),o("td",[t._v("Check if connection is still valid.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("const std::shared_ptr<IOStream>&")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#connectionpool-connectionwrapper-getunderlyingconnection"}},[t._v("getUnderlyingConnection")])]),t._v(" "),o("td",[t._v("Get underlying connection.")])])])]),t._v(" "),o("h3",{attrs:{id:"connectionpool-connectionwrapper-isvalid"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-connectionwrapper-isvalid"}},[t._v("#")]),t._v(" ConnectionPool::ConnectionWrapper::isValid")]),t._v(" "),o("p",[t._v("Check if connection is still valid. "),o("ul",[o("li",[o("strong",[t._v("@return")])])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"connectionpool-connectionwrapper-getunderlyingconnection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#connectionpool-connectionwrapper-getunderlyingconnection"}},[t._v("#")]),t._v(" ConnectionPool::ConnectionWrapper::getUnderlyingConnection")]),t._v(" "),o("p",[t._v("Get underlying connection. "),o("ul",[o("li",[o("strong",[t._v("@return")])])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUnderlyingConnection")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h2",{attrs:{id:"serverconnectionpool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#serverconnectionpool"}},[t._v("#")]),t._v(" ServerConnectionPool")]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#serverconnectionprovider"}},[t._v("oatpp::network::ServerConnectionProvider")]),t._v(" based on "),o("a",{attrs:{href:"#connectionpool"}},[t._v("ConnectionPool")]),t._v(".")],1),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" network "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerConnectionPool")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" ServerConnectionProvider "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),o("h3",{attrs:{id:"methods-3"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#methods-3"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),o("table",[o("thead",[o("tr",[o("th",[t._v("Return Type")]),t._v(" "),o("th",[t._v("Name")]),t._v(" "),o("th",[t._v("Summary")])])]),t._v(" "),o("tbody",[o("tr",[o("td",[o("code",[t._v("[none]")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#serverconnectionpool-serverconnectionpool"}},[t._v("ServerConnectionPool")])]),t._v(" "),o("td",[t._v("Constructor.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("std::shared_ptr<IOStream>")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#serverconnectionpool-getconnection"}},[t._v("getConnection")])]),t._v(" "),o("td",[t._v("Get connection.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("oatpp::async::CoroutineStarterForResult<const std::shared_ptr<IOStream>&>")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#serverconnectionpool-getconnectionasync"}},[t._v("getConnectionAsync")])]),t._v(" "),o("td",[t._v("Get connection in Async manner.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("void")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#serverconnectionpool-invalidateconnection"}},[t._v("invalidateConnection")])]),t._v(" "),o("td",[t._v("Invalidate connection that was previously created by this provider.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("void")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#serverconnectionpool-close"}},[t._v("close")])]),t._v(" "),o("td",[t._v("Close pool.")])])])]),t._v(" "),o("h3",{attrs:{id:"serverconnectionpool-serverconnectionpool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#serverconnectionpool-serverconnectionpool"}},[t._v("#")]),t._v(" ServerConnectionPool::ServerConnectionPool")]),t._v(" "),o("p",[t._v("Constructor. "),o("ul",[o("li",[o("strong",[t._v("@param")]),t._v(" connectionProvider - underlying connection provider. ")]),o("li",[o("strong",[t._v("@param")]),t._v(" maxConnections - maximum number of allowed connections in the pool. ")]),o("li",[o("strong",[t._v("@param")]),t._v(" maxConnectionTTL - maximum time that unused connection is allowed to live in the pool. ")])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[t._v("ServerConnectionPool")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ServerConnectionProvider"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" connectionProvider"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     v_int64 maxConnections"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("chrono"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("duration"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("v_int64"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("micro"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" maxConnectionTTL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"serverconnectionpool-getconnection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#serverconnectionpool-getconnection"}},[t._v("#")]),t._v(" ServerConnectionPool::getConnection")]),t._v(" "),o("p",[t._v("Get connection. This call will wait until connection is available. "),o("ul",[o("li",[o("strong",[t._v("@return")])])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[t._v("std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),o("h3",{attrs:{id:"serverconnectionpool-getconnectionasync"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#serverconnectionpool-getconnectionasync"}},[t._v("#")]),t._v(" ServerConnectionPool::getConnectionAsync")]),t._v(" "),o("p",[t._v("Get connection in Async manner. This call will wait until connection is available. "),o("ul",[o("li",[o("strong",[t._v("@return")])])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[t._v("oatpp"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("async"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("CoroutineStarterForResult"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnectionAsync")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),o("h3",{attrs:{id:"serverconnectionpool-invalidateconnection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#serverconnectionpool-invalidateconnection"}},[t._v("#")]),t._v(" ServerConnectionPool::invalidateConnection")]),t._v(" "),o("p",[t._v("Invalidate connection that was previously created by this provider. Ex.: if provider is pool based - you can signal that this connection should not be reused anymore. "),o("ul",[o("li",[o("strong",[t._v("@param")]),t._v(" connection ")])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("invalidateConnection")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" connection"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),o("h3",{attrs:{id:"serverconnectionpool-close"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#serverconnectionpool-close"}},[t._v("#")]),t._v(" ServerConnectionPool::close")]),t._v(" "),o("p",[t._v("Close pool.")]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),o("h2",{attrs:{id:"clientconnectionpool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#clientconnectionpool"}},[t._v("#")]),t._v(" ClientConnectionPool")]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#clientconnectionprovider"}},[t._v("oatpp::network::ClientConnectionProvider")]),t._v(" based on "),o("a",{attrs:{href:"#connectionpool"}},[t._v("ConnectionPool")]),t._v(".")],1),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" network "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClientConnectionPool")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" ClientConnectionProvider "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),o("h3",{attrs:{id:"methods-4"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#methods-4"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),o("table",[o("thead",[o("tr",[o("th",[t._v("Return Type")]),t._v(" "),o("th",[t._v("Name")]),t._v(" "),o("th",[t._v("Summary")])])]),t._v(" "),o("tbody",[o("tr",[o("td",[o("code",[t._v("[none]")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#clientconnectionpool-clientconnectionpool"}},[t._v("ClientConnectionPool")])]),t._v(" "),o("td",[t._v("Constructor.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("std::shared_ptr<IOStream>")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#clientconnectionpool-getconnection"}},[t._v("getConnection")])]),t._v(" "),o("td",[t._v("Get connection.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("oatpp::async::CoroutineStarterForResult<const std::shared_ptr<IOStream>&>")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#clientconnectionpool-getconnectionasync"}},[t._v("getConnectionAsync")])]),t._v(" "),o("td",[t._v("Get connection in Async manner.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("void")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#clientconnectionpool-invalidateconnection"}},[t._v("invalidateConnection")])]),t._v(" "),o("td",[t._v("Invalidate connection that was previously created by this provider.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("void")])]),t._v(" "),o("td",[o("a",{attrs:{href:"#clientconnectionpool-close"}},[t._v("close")])]),t._v(" "),o("td",[t._v("Close pool.")])])])]),t._v(" "),o("h3",{attrs:{id:"clientconnectionpool-clientconnectionpool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#clientconnectionpool-clientconnectionpool"}},[t._v("#")]),t._v(" ClientConnectionPool::ClientConnectionPool")]),t._v(" "),o("p",[t._v("Constructor. "),o("ul",[o("li",[o("strong",[t._v("@param")]),t._v(" connectionProvider - underlying connection provider. ")]),o("li",[o("strong",[t._v("@param")]),t._v(" maxConnections - maximum number of allowed connections in the pool. ")]),o("li",[o("strong",[t._v("@param")]),t._v(" maxConnectionTTL - maximum time that unused connection is allowed to live in the pool. ")])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token function"}},[t._v("ClientConnectionPool")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ClientConnectionProvider"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" connectionProvider"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     v_int64 maxConnections"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                     "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("chrono"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("duration"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("v_int64"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("micro"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" maxConnectionTTL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),o("h3",{attrs:{id:"clientconnectionpool-getconnection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#clientconnectionpool-getconnection"}},[t._v("#")]),t._v(" ClientConnectionPool::getConnection")]),t._v(" "),o("p",[t._v("Get connection. This call will wait until connection is available. "),o("ul",[o("li",[o("strong",[t._v("@return")])])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[t._v("std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),o("h3",{attrs:{id:"clientconnectionpool-getconnectionasync"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#clientconnectionpool-getconnectionasync"}},[t._v("#")]),t._v(" ClientConnectionPool::getConnectionAsync")]),t._v(" "),o("p",[t._v("Get connection in Async manner. This call will wait until connection is available. "),o("ul",[o("li",[o("strong",[t._v("@return")])])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[t._v("oatpp"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("async"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("CoroutineStarterForResult"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnectionAsync")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),o("h3",{attrs:{id:"clientconnectionpool-invalidateconnection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#clientconnectionpool-invalidateconnection"}},[t._v("#")]),t._v(" ClientConnectionPool::invalidateConnection")]),t._v(" "),o("p",[t._v("Invalidate connection that was previously created by this provider. Ex.: if provider is pool based - you can signal that this connection should not be reused anymore. "),o("ul",[o("li",[o("strong",[t._v("@param")]),t._v(" connection ")])])]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("invalidateConnection")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IOStream"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" connection"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),o("h3",{attrs:{id:"clientconnectionpool-close"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#clientconnectionpool-close"}},[t._v("#")]),t._v(" ClientConnectionPool::close")]),t._v(" "),o("p",[t._v("Close pool.")]),t._v(" "),o("div",{staticClass:"language-cpp extra-class"},[o("pre",{pre:!0,attrs:{class:"language-cpp"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);